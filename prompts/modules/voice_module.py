import os
from openai import OpenAI, OpenAIError

from core.credentials import OPENAI_API_KEY
from modules.voice_cache import save_mp3_file, get_voice_cache_path  # get_voice_cache_path –Ω—É–∂–µ–Ω –¥–ª—è –ø—É—Ç–∏
from modules.flood_guard import check_meaning
from modules.emotion_detector import should_block_emotion
from modules.behavior.style_map import resolve_style
from prompts import load_prompts

client = OpenAI(api_key=OPENAI_API_KEY)


def is_text_blocked(user_id: int, text: str, lang: str = "ru", db=None) -> bool:
    if not text:
        return True
    text = text.strip().lower()
    bad_words = load_prompts(lang).get("filters", {}).get("BAD_WORDS", [])
    return any(w in text for w in bad_words)


def style_to_voice(style: str = "–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π", lang: str = "ru") -> str:
    style = style.lower().strip()
    if lang == "ru":
        return {
            "—Å—É—Ö–æ–π": "nova",
            "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π": "aidar",
            "–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π": "baya",
        }.get(style, "baya")
    elif lang == "en":
        return {
            "dry": "echo",
            "formal": "onyx",
            "friendly": "alloy",
        }.get(style, "alloy")
    return "alloy"


def generate_and_save_voice(
    text: str,
    user_id: int,
    lang: str = "ru",
    style: str = "–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π",
) -> str | None:
    """
    Generate TTS and save MP3 to cache. Returns absolute file path or None.
    Uses streaming write to avoid API response handling quirks.
    """
    # ‚õ≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –º–æ–∂–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å –∏—Ö –≤–ª–∏—è–Ω–∏–µ
    if is_text_blocked(user_id, text, lang):
        print("‚õî Blocked by toxic filter")
        return None

    if not check_meaning(text, lang=lang):
        print("‚õî Blocked by semantic filter")
        return None

    if should_block_emotion(text, user_id=user_id, lang=lang):
        print("‚õî Blocked by emotion filter")
        return None

    style = resolve_style(style, lang)
    voice = style_to_voice(style, lang)

    # –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫—ç—à–∞ (—É—á–∏—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å)
    try:
        cache_path = get_voice_cache_path(text=text, lang=lang, voice=voice)
    except TypeError:
        # –µ—Å–ª–∏ —É —Ç–µ–±—è —Å—Ç–∞—Ä–∞—è —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ get_voice_cache_path –±–µ–∑ voice ‚Äî —Å—Ä–æ—á–Ω–æ –æ–±–Ω–æ–≤–∏ voice_cache.py
        # –Ω–∞ –≤–µ—Ä—Å–∏—é —Å (text, lang, voice)
        print("‚ö†Ô∏è get_voice_cache_path() –±–µ–∑ voice ‚Äî –æ–±–Ω–æ–≤–∏ modules/voice_cache.py")
        return None

    os.makedirs(os.path.dirname(cache_path), exist_ok=True)

    print(f"üéôÔ∏è TTS try: model='tts-1', voice='{voice}', lang='{lang}', text='{text}'")
    try:
        # –Ω–∞–¥—ë–∂–Ω—ã–π —Å–ø–æ—Å–æ–±: streaming ‚Üí —Å—Ä–∞–∑—É –≤ —Ñ–∞–π–ª
        with client.audio.speech.with_streaming_response.create(
            model="tts-1",          # –∏–ª–∏ "gpt-4o-mini-tts" –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
            voice=voice,
            input=text,
        ) as resp:
            resp.stream_to_file(cache_path)

        exists = os.path.exists(cache_path)
        print(f"‚úÖ TTS done, file_exists={exists}, path={cache_path}")
        return cache_path if exists else None

    except OpenAIError as e:
        print("‚ùå OpenAI TTS error:", repr(e))
        return None
    except Exception as e:
        print("‚ùå TTS unexpected error:", repr(e))
        return None